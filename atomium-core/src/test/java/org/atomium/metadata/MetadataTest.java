package org.atomium.metadata;

import org.atomium.NamedValues;
import org.atomium.annotations.Column;
import org.atomium.annotations.PrimaryKey;
import org.atomium.annotations.Table;
import org.atomium.metadata.Metadata;
import org.atomium.metadata.MetadataRegistry;
import org.atomium.metadata.SimpleMetadataRegistry;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.hamcrest.CoreMatchers.*;
import static org.junit.Assert.assertThat;

/**
 * @author Blackrush
 */
@RunWith(JUnit4.class)
public class MetadataTest {
    public static class MyEntity {
        @Column
        @PrimaryKey(autogenerated = true)
        private int id;

        private String name;

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        @Column
        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }
    }

    @Table("my_custom_entity_name_lel")
    public static class MyCustomEntity {
        @Column("the_id_lel") @PrimaryKey int id;

        String name;

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        @Column("the_name_lel")
        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }
    }

    private Metadata<MyEntity> myEntity;
    private Metadata<MyCustomEntity> myCustomEntity;

    @Before
    public void setUp() throws Exception {
        MetadataRegistry registry = new SimpleMetadataRegistry();

        myEntity = registry.register(MyEntity.class);
        myCustomEntity = registry.register(MyCustomEntity.class);
    }

    @Test
    public void testTableName() throws Exception {
        assertThat(myEntity.getTableName(), is("myEntity"));
        assertThat(myCustomEntity.getTableName(), is("my_custom_entity_name_lel"));
    }

    @Test
    public void testColumns() throws Exception {
        assertThat(myEntity.getColumn("id"), notNullValue());
        assertThat(myEntity.getColumn("name"), notNullValue());
        assertThat(myEntity.getColumns().size(), is(2));

        assertThat(myCustomEntity.getColumn("the_id_lel"), notNullValue());
        assertThat(myCustomEntity.getColumn("the_name_lel"), notNullValue());
        assertThat(myCustomEntity.getColumns().size(), is(2));
    }

    @Test
    public void testPrimaryKey() throws Exception {
        assertThat(myEntity.getPrimaryKey(), is(myEntity.getColumn("id")));
        assertThat(myEntity.getPrimaryKey().isPrimaryKey(), is(true));
        assertThat(myEntity.getPrimaryKey().isAutogenerated(), is(true));

        assertThat(myCustomEntity.getPrimaryKey(), is(myCustomEntity.getColumn("the_id_lel")));
        assertThat(myCustomEntity.getPrimaryKey().isPrimaryKey(), is(true));
        assertThat(myCustomEntity.getPrimaryKey().isAutogenerated(), is(false));
    }

    @Test
    public void testMapFromInstance() throws Exception {
        MyEntity instance = new MyEntity();
        instance.setId(1);
        instance.setName("lel");

        NamedValues values = myEntity.map(instance);

        assertThat(values.length(), is(2));
        assertThat(values.get("id"), is((Object) 1));
        assertThat(values.get("name"), is((Object) "lel"));
    }

    @Test
    public void testMapToInstance() throws Exception {
        NamedValues values = NamedValues.of()
                .set("id", 1)
                .set("name", "lel");

        MyEntity instance = myEntity.map(values);

        assertThat(instance.getId(), is((Object) 1));
        assertThat(instance.getName(), is((Object) "lel"));
    }
}
