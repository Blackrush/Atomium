package org.atomium.metadata;

import com.google.common.reflect.TypeToken;
import org.atomium.Ref;
import org.atomium.SimpleRef;
import org.atomium.annotations.Column;
import org.atomium.annotations.PrimaryKey;

import java.lang.annotation.Annotation;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * @author Blackrush
 */
public abstract class ColumnMetadata<T> implements ColumnInfo {
    private final Metadata<T> parent;
    private final String name;

    private boolean primaryKey, autogenerated, nullable;

    public ColumnMetadata(Metadata<T> parent, String name) {
        this.parent = checkNotNull(parent);
        this.name = checkNotNull(name);
    }

    /**
     * get the {@link Metadata} that owns this column
     * @return the non-null parent
     */
    public Metadata<T> getParent() {
        return parent;
    }

    /**
     * get the {@link org.atomium.metadata.MetadataRegistry} that contains this column's parent
     * @return the non-null parent's registry
     */
    public MetadataRegistry getRegistry() {
        return parent.getRegistry();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String getName() {
        return name;
    }

    @Override
    public boolean isPrimaryKey() {
        return primaryKey;
    }

    @Override
    public boolean isAutogenerated() {
        return autogenerated;
    }

    @Override
    public boolean isNullable() {
        return nullable;
    }

    /**
     * get the {@link ConverterInterface} that can handle this column
     * @return a nullable {@link ConverterInterface}
     */
    public ConverterInterface getConverter() {
        return getRegistry().getConverter(this);
    }

    /**
     * do some back-end operations
     */
    public void load() {
        nullable = getAnnotation(Column.class).nullable();

        PrimaryKey pkey = getAnnotation(PrimaryKey.class);
        if (pkey != null) {
            primaryKey = true;
            autogenerated = pkey.autogenerated();
            nullable = false;
        }
    }

    /**
     * gets column's value of the given instance
     * @param instance the non-null instance
     * @return the nullable value
     */
    public abstract Object get(T instance);

    /**
     * sets column's value of the given instance
     * @param instance the non-null instance
     * @param o the nullable value
     */
    public abstract void set(T instance, Object o);

    /**
     * @see java.lang.reflect.Field#getAnnotation(Class)
     * @see java.lang.reflect.Method#getAnnotation(Class)
     */
    public abstract <T extends Annotation> T getAnnotation(Class<T> clazz);

    /**
     * creates a new {@link Ref} bound to this column with the given identifier
     * @param identifier the identifier
     * @return a non-null {@link Ref}
     */
    public Ref<T> getRef(Object identifier) {
        return new SimpleRef<>(this, identifier);
    }

    /**
     * <p>creates a new {@link Ref} bound to this column for the given entity</p>
     *
     * <p>
     * this method is a shortcut for
     * <code>
     * T instance = ...;
     * ColumnMetadata<T> column = ...;
     * Ref<T> ref = column.getRef(column.get(instance));
     * </code>
     * </p>
     * @param instance
     * @return
     */
    public Ref<T> getRefFor(T instance) {
        return new SimpleRef<>(this, get(instance));
    }

    @Override
    public ColumnInfo withName(String name) {
        return SimpleColumnInfo.create(name, getTarget(), isPrimaryKey(), isAutogenerated(), isNullable());
    }

    @Override
    public ColumnInfo withTarget(TypeToken<?> target) {
        return SimpleColumnInfo.create(getName(), target, isPrimaryKey(), isAutogenerated(), isNullable());
    }

    @Override
    public ColumnInfo withPrimaryKey(boolean primaryKey) {
        return SimpleColumnInfo.create(getName(), getTarget(), primaryKey, isAutogenerated(), isNullable());
    }

    @Override
    public ColumnInfo withAutogenerated(boolean autogenerated) {
        return SimpleColumnInfo.create(getName(), getTarget(), isPrimaryKey(), autogenerated, isNullable());
    }

    @Override
    public ColumnInfo withNullable(boolean nullable) {
        return SimpleColumnInfo.create(getName(), getTarget(), isPrimaryKey(), isAutogenerated(), nullable);
    }

    @Override
    public ColumnInfo asColumnInfo() {
        return SimpleColumnInfo.create(getName(), getTarget(), isPrimaryKey(), isAutogenerated(), isNullable());
    }
}
