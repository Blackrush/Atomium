package org.atomium.metadata;

import com.google.common.reflect.TypeToken;
import org.atomium.annotations.Column;
import org.atomium.annotations.PrimaryKey;

import java.lang.reflect.Field;

import static com.google.common.base.Throwables.propagate;

/**
 * @author Blackrush
 */
public class FieldColumnMetadata<T> extends ColumnMetadata<T> {
    private final Field field;

    private boolean primaryKey, autogenerated, nullable;

    public FieldColumnMetadata(Metadata<T> parent, String name, Field field) {
        super(parent, name);
        this.field = field;
        this.field.setAccessible(true);
    }

    @Override
    public boolean isPrimaryKey() {
        return primaryKey;
    }

    @Override
    public boolean isAutogenerated() {
        return autogenerated;
    }

    @Override
    public boolean isNullable() {
        return nullable;
    }

    @Override
    public TypeToken<?> getTarget() {
        return TypeToken.of(field.getGenericType());
    }

    @Override
    public void load() {
        nullable = field.getAnnotation(Column.class).nullable();

        PrimaryKey pkey = field.getAnnotation(PrimaryKey.class);
        if (pkey != null) {
            primaryKey = true;
            autogenerated = pkey.autogenerated();
            nullable = false;
        }
    }

    @Override
    public Object get(T entity) {
        try {
            return field.get(entity);
        } catch (IllegalAccessException e) {
            throw propagate(e);
        }
    }

    @Override
    public void set(T entity, Object o) {
        try {
            field.set(entity, o);
        } catch (IllegalAccessException e) {
            throw propagate(e);
        }
    }
}
