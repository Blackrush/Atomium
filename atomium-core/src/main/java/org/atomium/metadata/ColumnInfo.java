package org.atomium.metadata;

import com.google.common.reflect.TypeToken;

/**
 * @author Blackrush
 */
public interface ColumnInfo {
    /**
     * get this column's name
     * @return the non-null name
     */
    String getName();

    /**
     * get this column's target type
     * @return the non-null target
     */
    TypeToken<?> getTarget();

    /**
     * returns <code>true</code> if this column is a primary key, <code>false</code> otherwise
     * @return <code>true</code> if this column is a primary key, <code>false</code> otherwise
     */
    boolean isPrimaryKey();

    /**
     * returns <code>true</code> if this column is autogenerated, <code>false</code> otherwise
     * @return <code>true</code> if this column is autogenerated, <code>false</code> otherwise
     */
    boolean isAutogenerated();

    /**
     * returns <code>true</code> if this column is nullable, <code>false</code> otherwise
     * @return <code>true</code> if this column is nullable, <code>false</code> otherwise
     */
    boolean isNullable();

    /**
     * creates a new {@link ColumnInfo} and set its name to the one given in parameter
     * @param name the new name
     * @return a non-null {@link ColumnInfo}
     */
    ColumnInfo withName(String name);

    /**
     * creates a new {@link ColumnInfo} and set its target to the one given in parameter
     * @param target the new target
     * @return a non-null {@link ColumnInfo}
     */
    ColumnInfo withTarget(TypeToken<?> target);

    /**
     * creates a new {@link ColumnInfo} and set its primaryKey flag to the one given in parameter
     * @param primaryKey the new primaryKey flag
     * @return a non-null {@link ColumnInfo}
     */
    ColumnInfo withPrimaryKey(boolean primaryKey);

    /**
     * creates a new {@link ColumnInfo} and set its autogenerated flag to the one given in parameter
     * @param autogenerated the new autogenerated flag
     * @return a non-null {@link ColumnInfo}
     */
    ColumnInfo withAutogenerated(boolean autogenerated);

    /**
     * creates a new {@link ColumnInfo} and set its nullable flag to the one given in parameter
     * @param nullable the new nullable flag
     * @return a non-null {@link ColumnInfo}
     */
    ColumnInfo withNullable(boolean nullable);

    /**
     * converts this instance to {@link ColumnInfo}
     * @return a non-null column info
     */
    ColumnInfo asColumnInfo();
}
