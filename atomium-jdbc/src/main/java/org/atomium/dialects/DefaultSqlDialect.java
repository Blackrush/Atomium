package org.atomium.dialects;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Sets;
import org.atomium.*;

import java.util.Set;

/**
 * @author Blackrush
 */
public class DefaultSqlDialect implements SqlDialectInterface {
    public static final char TICK = '`';

    public static <T> Set<T> without(Set<T> collection, T element) {
        Set<T> result;
        if (collection instanceof ImmutableSet<?>) {
            result = Sets.newHashSet(collection);
        } else {
            result = collection;
        }
        result.remove(element);
        return result;
    }

    private final JdbcDatabaseMetadata meta;

    public DefaultSqlDialect(JdbcDatabaseMetadata meta) {
        this.meta = meta;
    }

    protected int getDefaultLength() {
        return 255;
    }

    protected boolean useTicks() {
        return true;
    }

    protected String primaryKeyConstraint() {
        return "PRIMARY KEY";
    }

    protected String notNullConstraint() {
        return "NOT NULL";
    }

    protected String autoIncrementConstraint() {
        return "AUTOINCREMENT";
    }

    protected String escape(String identifier) {
        if (useTicks()) return TICK + identifier + TICK;
        return identifier;
    }

    <T> String columnStructure(Set<ColumnMetadata<T>> columns) {
        StringBuilder builder = new StringBuilder();
        boolean first = true;
        for (ColumnMetadata<T> column : columns) {
            if (first) first = false;
            else builder.append(", ");

            JdbcDatabaseMetadata.SqlType sqlType = meta.getType(column.getTarget().getRawType());

            builder.append(escape(column.getName()))
                    .append(' ').append(sqlType.name);

            if (sqlType.hasParam(JdbcDatabaseMetadata.LENGTH_PARAM)) {
                builder.append('(').append(getDefaultLength()).append(')');
            }

            if (column.isPrimaryKey()) {
                builder.append(' ').append(primaryKeyConstraint());
            } else if (!column.isNullable()) {
                builder.append(' ').append(notNullConstraint());
            }

            if (column.isAutogenerated()) {
                builder.append(' ').append(autoIncrementConstraint());
            }
        }
        return builder.toString();
    }

    String columnList(Set <?> columns) {
        StringBuilder builder = new StringBuilder();
        boolean first = true;
        for (Object column : columns) {
            if (first) first = false;
            else builder.append(", ");

            if (useTicks()) builder.append(TICK);

            if (column instanceof ColumnMetadata<?>) {
                builder.append(((ColumnMetadata) column).getName());
            } else {
                builder.append(column.toString());
            }

            if (useTicks()) builder.append(TICK);
        }
        return builder.toString();
    }

    String placeholderList(Set<String> columns) {
        StringBuilder builder = new StringBuilder();
        boolean first = true;
        for (String column : columns) {
            if (first) first = false;
            else builder.append(", ");
            builder.append(':').append(column);
        }
        return builder.toString();
    }

    String columnPlaceholderList(Set<String> columnNames) {
        StringBuilder builder = new StringBuilder();
        boolean first = true;
        for (String columnName : columnNames) {
            if (first) first = false;
            else builder.append(", ");
            builder.append(escape(columnName)).append("=:").append(columnName);
        }
        return builder.toString();
    }

    @Override
    public <T> SqlQuery buildStructure(Metadata<T> meta) {
        return SqlQuery.create("CREATE TABLE %s(%s);",
                escape(meta.getTableName()),
                columnStructure(meta.getColumns())
        );
    }

    @Override
    public <T> SqlQuery destroyStructure(Metadata<T> meta) {
        return SqlQuery.create("DROP TABLE %s;", escape(meta.getTableName()));
    }

    @Override
    public <T> SqlQuery create(Metadata<T> meta, T instance) {
        NamedValues values = meta.map(instance);
        values.set(meta.getPrimaryKey().getName(), null); // force auto-generation

        return SqlQuery.create(values, "INSERT INTO %s(%s) VALUES(%s);",
                escape(meta.getTableName()),
                columnList(values.keyView()),
                placeholderList(values.keyView())
        );
    }

    @Override
    public <T> SqlQuery read(Metadata<T> meta) {
        return SqlQuery.create("SELECT %s FROM %s;", columnList(meta.getColumns()), escape(meta.getTableName()));
    }

    @Override
    public <T> SqlQuery read(Ref<T> ref) {
        NamedValues values = NamedValues.of();
        values.set(ref.getColumn().getName(), ref.getIdentifier());

        return SqlQuery.create(values, "SELECT %s FROM %s WHERE %s;",
                columnList(ref.getEntityMetadata().getColumns()),
                escape(ref.getEntityMetadata().getTableName()),
                columnPlaceholderList(values.keyView())
        );
    }

    @Override
    public <T> SqlQuery update(Metadata<T> meta, T instance) {
        NamedValues values = meta.map(instance);
        return SqlQuery.create(values, "UPDATE %s SET %s WHERE %s;",
                escape(meta.getTableName()),
                columnPlaceholderList(without(values.keyView(), meta.getPrimaryKey().getName())), // all columns but pkey
                columnPlaceholderList(ImmutableSet.of(meta.getPrimaryKey().getName()))
        );
    }

    @Override
    public <T> SqlQuery delete(Metadata<T> meta, T instance) {
        NamedValues values = NamedValues.of();
        values.set(meta.getPrimaryKey().getName(), meta.getPrimaryKey().get(instance));

        return SqlQuery.create(values, "DELETE FROM %s WHERE %s;",
                escape(meta.getTableName()),
                columnPlaceholderList(values.keyView())
        );
    }

    @Override
    public <T> SqlQuery delete(Ref<T> ref) {
        NamedValues values = NamedValues.of();
        values.set(ref.getColumn().getName(), ref.getIdentifier());

        return SqlQuery.create(values, "DELETE FROM %s WHERE %s;",
                escape(ref.getEntityMetadata().getTableName()),
                columnPlaceholderList(values.keyView())
        );
    }
}
